<div id="settings_plugin_prusaconnectbridge_content_area">
    <h4>Prusa Connect Bridge Status & Identifiers</h4>
    <form class="form-horizontal">
        <div class="control-group">
            <label class="control-label" for="pconnect_manual_sn">Manual Serial Number</label>
            <div class="controls">
                <input type="text" id="pconnect_manual_sn" name="prusa_connect_manual_sn" class="input-xlarge"
                       data-bind="value: settings.plugins.prusaconnectbridge.prusa_connect_manual_sn"
                       placeholder="Leave blank for auto-generated SN">
                <span class="help-block">
                    Optionally enter a specific Serial Number. If blank, an automatic SN (see 'Active SN' below) is used.
                    Changing this after registration may require re-registration (use 'Clear Stored Credentials' button).
                </span>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">Active Serial Number</label>
            <div class="controls">
                <span class="uneditable-input input-xlarge" data-bind="text: settings.plugins.prusaconnectbridge.prusa_connect_sn() ? settings.plugins.prusaconnectbridge.prusa_connect_sn() : 'Not set/generated'"></span>
                <span class="help-block">This is the Serial Number currently used for Prusa Connect registration.</span>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">Active Fingerprint</label>
            <div class="controls">
                <span class="uneditable-input input-xlarge" data-bind="text: settings.plugins.prusaconnectbridge.prusa_connect_fingerprint() ? settings.plugins.prusaconnectbridge.prusa_connect_fingerprint().substring(0, 10) + '...' : 'Not set/generated'"></span>
                 <span class="help-block">This is the Fingerprint currently used, derived from the Active SN.</span>
            </div>
        </div>
    </form>

    <p>
        <strong>Registration Status:</strong>
        <span data-bind="text: prusaConnectStatusTextForUI"></span>
    </p>

    <hr>
    <h4>Configuration</h4>
    <form class="form-horizontal">
        <div class="control-group">
            <label class="control-label" for="pconnect_server_url">Prusa Connect Server URL</label>
            <div class="controls">
                <input type="text" id="pconnect_server_url" class="input-xlarge" data-bind="value: settings.plugins.prusaconnectbridge.prusa_server_url">
            </div>
        </div>
    </form>

    <hr>
    <h4>Actions</h4>
    <p>
        <button class="btn btn-danger" id="pconnect_clear_settings_btn">Clear Stored Credentials & Re-Register</button>
        <br>
        <small class="text-muted">
            Removes current Prusa Connect token, SN, and fingerprint. Initiates re-registration.
            If server URL changed, save settings first. Restart OctoPrint for a clean SDK reset if issues persist.
        </small>
    </p>
</div>

<script type="text/javascript">
$(function() {
    function PrusaConnectBridgeSettingsViewModel(parameters) {
        var self = this;
        self.settingsViewModel = parameters[0];
        self.loginStateViewModel = parameters[1]; // For user permission check

        self.prusaConnectStatusTextForUI = ko.observable(
            "{{ prusa_connect_status_text | e | replace('\"', '\\\"') }}" // Initial value, ensure proper escaping
        );
         // SN could also be an observable if it can change dynamically without full settings reload
        // self.prusaConnectSNForUI = ko.observable("{{ prusa_connect_sn | e }}");


        self.onDataUpdaterPluginMessage = function(plugin, data) {
            if (plugin !== "prusaconnectbridge" || !data) {
                return;
            }
            if (data.status_text !== undefined) { // Check for undefined specifically
                self.prusaConnectStatusTextForUI(data.status_text);
            }
            if (data.prusa_connect_sn !== undefined) {
                // Update the underlying settings observable if SN changes
                // This ensures that if other parts of settings UI depend on this value, they also update
                self.settingsViewModel.settings.plugins.prusaconnectbridge.prusa_connect_sn(data.prusa_connect_sn);
            }
        };

        self.onAfterBinding = function() {
            // Set initial status from template, which should be up-to-date via get_template_vars
            var initialStatus = "{{ prusa_connect_status_text | e | replace('\"', '\\\"') }}";
            self.prusaConnectStatusTextForUI(initialStatus);
        };

        $("#pconnect_clear_settings_btn").on("click", function() {
            if (!self.loginStateViewModel.isUser()) { // Check if user is logged in
                new PNotify({ title: "Permission Denied", text: "You must be logged in to perform this action.", type: "error", hide: false });
                return;
            }

            OctoPrint.simpleApiCommand("prusaconnectbridge", "clear_prusa_connect_settings", {})
                .done(function(response) {
                    new PNotify({
                        title: "Prusa Connect Bridge",
                        text: response.message || "Settings cleared. Re-registration process initiated.",
                        type: "info",
                        hide: false // Make message sticky
                    });
                    // Request full settings refresh to update SN and other bound values
                    OctoPrint.settings.requestData();
                    // Status will update via onDataUpdaterPluginMessage from backend push or after settings refresh
                    self.prusaConnectStatusTextForUI("Re-registration initiated. Refreshing data...");
                })
                .fail(function(jqXHR) {
                    var errorMsg = "Failed to clear settings. Please check plugin logs for details.";
                    if (jqXHR.responseJSON && jqXHR.responseJSON.message) {
                        errorMsg = jqXHR.responseJSON.message;
                    }
                    new PNotify({ title: "Prusa Connect Bridge - Error", text: errorMsg, type: "error", hide: false });
                });
        });
    }

    OCTOPRINT_VIEWMODELS.push({
        construct: PrusaConnectBridgeSettingsViewModel,
        dependencies: ["settingsViewModel", "loginStateViewModel"],
        elements: ["#settings_plugin_prusaconnectbridge_content_area"]
    });
});
</script>
